/*! Angular Charts 0.0.1 (built on Tue Sep 03 2013 17:37:02) */
!function(a){"use strict";a.module("chartsControllers",[])}(angular),function(a){"use strict";function b(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){"radio"!==c.type&&"checkbox"!==c.type&&(b.off("input").off("keydown").off("change"),b.on("blur",function(){a.$apply(function(){d.$setViewValue(b.val())})}))}}}a.module("chartsDirectives",[]).directive("ngModelOnblur",b)}(angular),function(a){"use strict";a.module("chartsFilters",[])}(angular),function(a){"use strict";a.module("charts",["chartsFilters","chartsDirectives","chartsControllers","chartsServices","chart","barchart","linechart"])}(angular),function(a){"use strict";function b(){return{parse:function(b){b instanceof a.element||(b=a.element(b));var c=Array.prototype.filter.call(b,function(a){return a&&1===a.nodeType&&"TABLE"===a.tagName})[0];if(!c)return null;b=a.element(c);var d={},e=b.find("thead").eq(0);if(e){var f=e.find("tr").eq(0),g=f.find("th"),h=Array.prototype.map.call(g,function(b){return a.element(b).text()});d.primaryColumnName=h[0],d.columnNames=h.slice(1)}var i=b.find("tbody").eq(0);if(i){var j=i.find("tr"),k=Array.prototype.map.call(j,function(b){var c=a.element(b),d=c.find("th").eq(0),e=c.find("td"),f=d.text()||null,g=Array.prototype.map.call(e,function(b){var c=a.element(b);return{number:Number(c.text())}});return{name:f,values:g}});d.data=k}return d}}}a.module("chartsServices",[]).factory("ChartDataService",b)}(angular),function(a){"use strict";function b(a){"title"in a||(a.title=""),"isEditable"in a||(a.isEditable=!1),"primaryColumnName"in a||(a.primaryColumnName=""),"columnNames"in a||(a.columnNames=[]),"data"in a||(a.data=[]),"hasData"in a||(a.hasData=!1),"width"in a||(a.width=100),"height"in a||(a.height=100),"colors"in a||(a.colors=[]),a.getMaxValue=function(){var b=a.data.map(function(a){return a.values.reduce(function(a,b){return a+=b.number},0)},[]);return Math.max.apply(Math,b)||1},a.sum=function(a,b){b||0===b||(b=a.length),b=Math.max(0,Math.min(a.length,b));for(var c=0,d=0;b>d;d++)c+=a[d].number;return c}}function c(a){return{restrict:"E",templateUrl:"components/bar-chart/bar-chart.html",replace:!0,transclude:!0,scope:!0,controller:b,compile:function(b,c,d){return function(b){d(b,function(d){"title"in c&&(b.title=c.title),"editable"in c&&(b.isEditable="true"===c.editable),"data"in c&&(b.hasData="true"===c.data),"width"in c&&(b.width=c.width),"height"in c&&(b.height=c.height),"colors"in c&&(b.colors=c.colors.split(","));var e=a.parse(d);for(var f in e)b[f]=e[f]})}}}}b.$inject=["$scope"],c.$inject=["ChartDataService"],a.module("barchart",["chart"]).controller("BarChartCtrl",b).directive("barchart",c)}(angular),function(a){"use strict";function b(b){"title"in b||(b.title=""),"isEditable"in b||(b.isEditable=!1),"primaryColumnName"in b||(b.primaryColumnName=""),"columnNames"in b||(b.columnNames=[]),"data"in b||(b.data=[]),b._handleCellDblClicked=function(c){function d(a){console.log("preventing"),a.stopImmediatePropagation()}function e(a){a.preventDefault(),g.off("mousedown",d),h.off("mousedown",e),f.removeAttr("data-editable")}if(b.isEditable){c.preventDefault(),c.stopImmediatePropagation();var f=a.element("TD"===event.srcElement.tagName?event.srcElement:event.srcElement.parentNode),g=f.find("input"),h=a.element(document);g.off("input").off("keydown"),f.attr("data-editable","data-editable"),g[0].select(),g.on("mousedown",d),h.on("mousedown",e)}}}function c(a){return{restrict:"E",templateUrl:"components/chart/chart.html",replace:!0,transclude:!0,scope:!0,controller:b,compile:function(b,c,d){return function(b){d(b,function(d){"title"in c&&(b.title=c.title),"editable"in c&&(b.isEditable="true"===c.editable);var e=a.parse(d);for(var f in e)b[f]=e[f]})}}}}b.$inject=["$scope"],c.$inject=["ChartDataService"],a.module("chart",[]).controller("ChartCtrl",b).directive("chart",c)}(angular),function(a){"use strict";function b(a){"title"in a||(a.title=""),"isEditable"in a||(a.isEditable=!1),"primaryColumnName"in a||(a.primaryColumnName=""),"columnNames"in a||(a.columnNames=[]),"data"in a||(a.data=[]),"hasData"in a||(a.hasData=!1),"width"in a||(a.width=100),"height"in a||(a.height=100),"colors"in a||(a.colors=[]),a.getMaxValue=function(){var b=a.data.reduce(function(a,b){return a.concat(b.values.map(function(a){return a.number}))},[]);return Math.max.apply(Math,b)},a.sum=function(a,b){b||0===b||(b=a.length),b=Math.max(0,Math.min(a.length,b));for(var c=0,d=0;b>d;d++)c+=a[d].number;return c}}function c(a){return{restrict:"E",templateUrl:"components/line-chart/line-chart.html",replace:!0,transclude:!0,scope:!0,controller:b,compile:function(b,c,d){return function(b){d(b,function(d){"title"in c&&(b.title=c.title),"editable"in c&&(b.isEditable="true"===c.editable),"data"in c&&(b.hasData="true"===c.data),"width"in c&&(b.width=c.width),"height"in c&&(b.height=c.height),"colors"in c&&(b.colors=c.colors.split(","));var e=a.parse(d);for(var f in e)b[f]=e[f]})}}}}b.$inject=["$scope"],c.$inject=["ChartDataService"],a.module("linechart",["chart"]).controller("LineChartCtrl",b).directive("linechart",c)}(angular),angular.module("charts").run(["$templateCache",function(a){a.put("components/bar-chart/bar-chart.html",'<div class="bar-chart">\n	<div class="bar-chart--chart">\n		<svg xmlns="http://www.w3.org/2000/svg" version="1.1" ng-attr-width="{{ width }}" ng-attr-height="{{ height }}">\n			<style>\n				.bar rect:hover {\n					opacity: 0.8;\n					cursor: pointer;\n				}\n			</style>\n			<g class="data" transform="scale(1, -1) translate(0, -{{ height }})">\n				<g ng-repeat="series in data" class="bar">\n					<rect ng-repeat="value in series.values" ng-attr-x="{{ width * ($parent.$index + 0.125) / data.length }}" ng-attr-y="{{ (height - 10) * sum(series.values, $index) / getMaxValue() }}" ng-attr-width="{{ width * 0.75 / data.length }}" ng-attr-height="{{ (height - 10) * value.number / getMaxValue() }}" fill="{{ colors[$index] }}">\n						<animateTransform attributeName="transform" attributeType="XML" type="scale" from="0" to="0" dur="{{ $parent.$index * 100 }}ms" fill="freeze"/>\n						<animateTransform attributeName="transform" attributeType="XML" type="scale" from="1,0" to="1,1" begin="{{ $parent.$index * 100 }}ms" dur="300ms" fill="freeze"/>\n						<title>{{ series.name }} - {{ columnNames[$index] }}: {{ value.number }}</title>\n					</rect>\n				</g>\n			</g>\n			<g class="axes">\n				<line class="x-axis" x1="0" y1="0" x2="0" ng-attr-y2="{{ height }}" stroke="#666666" stroke-width="1" shape-rendering="crispEdges"/>\n				<line class="y-axis" x1="0" ng-attr-y1="{{ height - 1 }}" ng-attr-x2="{{ width }}" ng-attr-y2="{{ height - 1 }}" stroke="#666666" stroke-width="1" shape-rendering="crispEdges"/>\n			</g>\n		</svg>\n	</div>\n	<h3 class="bar-chart--title">{{ title }}</h3>\n	<div class="bar-chart--data" ng-show="hasData">\n		<chart/>\n	</div>\n</div>\n'),a.put("components/chart/chart.html",'<div class="chart">\n	<h3 class="chart--title">{{ title }}</h3>\n	<h6 ng-show="{{ isEditable }}" class="chart--instructions">Double-click table cells to edit values</h6>\n	<table class="chart--table table table-bordered table-striped table-hover">\n		<thead>\n			<tr>\n				<th>{{ primaryColumnName }}</th>\n				<th ng-repeat="columnName in columnNames">{{ columnName }}</th>\n			</tr>\n		</thead>\n		<tbody>\n			<tr ng-repeat="series in data | filter:filter">\n				<th>{{ series.name }}</th>\n				<td ng-repeat="value in series.values" class="chart--table--cell" ng-dblclick="_handleCellDblClicked($event)"><div class="chart--table--cell--value">{{ value.number }}</div><input type="number" ng-model="value.number" ng-model-onblur class="chart--table--cell--input"/></td>\n			</tr>\n		</tbody>\n	</table>\n</div>\n'),a.put("components/line-chart/line-chart.html",'<div class="line-chart">\n	<div class="line-chart--chart">\n		<svg xmlns="http://www.w3.org/2000/svg" version="1.1" ng-attr-width="{{ width }}" ng-attr-height="{{ height }}">\n			<style>\n				.line:hover {\n					opacity: 0.8;\n					cursor: pointer;\n				}\n				.point:hover {\n					opacity: 0.8;\n					cursor: pointer;\n				}\n			</style>\n			<g class="data" transform="scale(1, -1) translate(0, -{{ height }})">\n				<mask id="mask">\n					<rect width="{{ width }}" height="{{ height }}" fill="white">\n						<animate attributeName="width" from="0" to="{{ width }}" dur="1s"/>\n					</rect>\n				</mask>\n				<g ng-repeat="series in data" class="series">\n					<g class="line" mask="url(#mask)">\n						<line ng-repeat="value in series.values | limitTo:series.values.length - 1" ng-attr-x1="{{ width * ($index + 0.5) / series.values.length }}" ng-attr-y1="{{ (height - 10) * value.number / getMaxValue() }}" ng-attr-x2="{{ width * ($index + 1.5) / series.values.length }}" ng-attr-y2="{{ (height - 10) * series.values[$index + 1].number / getMaxValue() }}" stroke="{{ colors[$parent.$index] }}" stroke-width="4"/>\n						<title>{{ series.name }}</title>\n					</g>\n					<circle ng-repeat="value in series.values" class="point" ng-attr-cx="{{ width * ($index + 0.5) / series.values.length }}" ng-attr-cy="{{ (height - 10) * value.number / getMaxValue() }}" r="4" fill="white" stroke="{{ colors[$parent.$index] }}" stroke-width="3">\n						<animate attributeName="r" from="0" to="4" dur="{{ ($index + 1) / series.values.length * 1000 }}ms"/>\n						<title>{{ series.name }} - {{ columnNames[$index] }}: {{ value.number }}</title>\n					</circle>\n				</g>\n			</g>\n			<g class="axes">\n				<line class="x-axis" x1="0" y1="0" x2="0" ng-attr-y2="{{ height }}" stroke="#666666" stroke-width="1" shape-rendering="crispEdges"/>\n				<line class="y-axis" x1="0" ng-attr-y1="{{ height - 1 }}" ng-attr-x2="{{ width }}" ng-attr-y2="{{ height - 1 }}" stroke="#666666" stroke-width="1" shape-rendering="crispEdges"/>\n			</g>\n		</svg>\n	</div>\n	<h3 class="line-chart--title">{{ title }}</h3>\n	<div class="line-chart--data" ng-show="hasData">\n		<chart/>\n	</div>\n</div>\n')}]);